<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:mvc="http://www.springframework.org/schema/mvc" 
   xsi:schemaLocation="
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd
   http://www.springframework.org/schema/mvc 
   http://www.springframework.org/schema/mvc/spring-mvc.xsd ">

    <mvc:annotation-driven/>
    <context:component-scan base-package="com.tutorialspoint"/>
   
   
   <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <property name="prefix" value="/WEB-INF/jsp/" />
      <property name="suffix" value=".jsp" />
   </bean>
   
   <!-- Here you specified ExceptionPage (/WEB-INF/jsp/ExceptionPage.jsp) as an exception 
   view in case NameException occurs. 
   If there is any other type of exception then a generic view error (default name "error.jsp" inside
   /WEB-INF/jsp/) will take place.
   For example, AgeException is not specified here, so if it happens, a generic view (/WEB-INF/jsp/error.jsp)
   will take place, instead of ExceptionPage.
   
   Of course, one can override the default name "error" by adding another prop with general type of Exception, 
   and give the view name for it. One can also add another specific view for AgeException in a similar way.-->
   <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	   <property name="exceptionMappings">
	      <props>
	         <prop key="com.tutorialspoint.NameException">
	            ExceptionPage
	         </prop>
	      </props>
	   </property>
	   <property name="defaultErrorView" value="error"/>
	</bean>
 
</beans>























